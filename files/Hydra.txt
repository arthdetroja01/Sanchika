Hydra is a powerful and flexible tool for brute-forcing login credentials across various protocols and services. Here's an organized and detailed breakdown of its usage.
Basic Hydra Command Syntax

hydra [options] <target> <service/protocol>

Key Features:

    Hydra supports a wide range of protocols, including SSH, FTP, HTTP, Telnet, SMTP, and more.
    It can brute-force both usernames and passwords using custom lists.
    Multi-threaded operations allow faster execution.

Hydra Commands by Service
1. FTP Brute Force

To brute force an FTP server with a username and a password list:

hydra -l <username> -P <password_list> ftp://<MACHINE_IP>

Example:

hydra -l user -P passlist.txt ftp://192.168.1.1

2. SSH Brute Force

To brute force an SSH server:

hydra -l <username> -P <password_list> <MACHINE_IP> -t <threads> ssh

Options:

    -l: Specify the username.
    -P: Provide the path to the password list.
    -t: Set the number of threads (default is 16, but 4-8 threads are safer for some services).

Example:

hydra -l root -P passwords.txt 192.168.1.1 -t 4 ssh

3. Web Forms (HTTP-POST Method)

Hydra can brute-force web login forms using HTTP POST requests.

Syntax:

hydra -l <username> -P <password_list> <MACHINE_IP> http-post-form "<path>:<login_fields>:<failure_message>" -V

Options:

    -l: Username for the form.
    -P: Password list.
    http-post-form: Specify the POST method.
    <path>: Relative path of the login form (e.g., /login.php).
    <login_fields>: Form parameters for username and password (use ^USER^ for the username and ^PASS^ for the password).
    <failure_message>: A part of the response indicating failed login attempts.
    -V: Verbose mode to display each attempt.

Example:

hydra -l admin -P passlist.txt 192.168.1.1 http-post-form "/login.php:username=^USER^&password=^PASS^:F=Login failed" -V

    Details of the example:
        The login page is /login.php.
        The form fields are username and password.
        The failure message is identified by "Login failed."

Additional Options for Hydra

    -L <username_list>: Use a list of usernames instead of a single username.
    -p <password>: Use a single password instead of a list.
    -x <min>:<max>:<char_set>: Generate passwords dynamically.
    -f: Stop after the first valid pair is found.
    -o <output_file>: Save results to a file.

Example with Multiple Usernames:

hydra -L usernames.txt -P passwords.txt 192.168.1.1 ssh

Customizing HTTP-POST Commands

If the web form uses a generic path (/) or has unconventional parameter names:

hydra -l <username> -P <wordlist> <MACHINE_IP> http-post-form "/:user=^USER^&pass=^PASS^:F=Invalid credentials" -V

Useful Tips for Hydra

    Detect the Login Form:
        Use browser developer tools to inspect form elements or requests.
        Ensure correct parameter names for the login fields.

    Failure Message Identification:
        Check the response text when a login fails (e.g., "Incorrect password").
        Use a unique portion of this text as the <failure_message>.

    Handle Captchas and Lockouts:
        Hydra is ineffective against captchas.
        Monitor failed attempts to avoid IP blocking or account lockouts.

    Use Proxychains:
        Combine Hydra with proxychains to route traffic through a proxy for anonymity.

Commonly Used Commands Recap
Brute-Force SSH:

hydra -l root -P passwords.txt <MACHINE_IP> ssh

Brute-Force Web Login Form (POST):

hydra -l admin -P passlist.txt <MACHINE_IP> http-post-form "/login.php:username=^USER^&password=^PASS^:F=Login failed" -V

Use Custom Username and Password Lists:

hydra -L usernames.txt -P passwords.txt <MACHINE_IP> ssh

Stop on First Match:

hydra -l admin -P passwords.txt <MACHINE_IP> -f ssh